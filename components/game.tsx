import { useState, useEffect } from "react";import { CgSpinner } from "react-icons/cg";import { Button } from "./ui/button";import { Input } from "./ui/input";import { BsArrowRepeat } from "react-icons/bs";import {Difficulty} from "@/types/difficulty";export default function Game() {  const [data, setData] = useState<Difficulty[]>([]); // Initialize as an empty object  const [loading, setLoading] = useState(true);    const [currentMode, setCurrentMode] = useState<string>("easy");    const [modeWin, setModeWin] = useState(false)  const [result, setResult] = useState("");  const [guess, setGuess] = useState("");  const [currentAttempts, setCurrentAttempts] = useState<number>(0)  const [timeRemaining, setTimeRemaining] = useState(0);    const selectedDifficulty = data.find(        (difficulty) => difficulty.difficulty === currentMode    );  useEffect(() => {    fetch(`${process.env.NEXT_PUBLIC_BACK_END_URL}/api/numbers/create`, {method: "POST"} ).then(res => console.log(res))    fetch(`${process.env.NEXT_PUBLIC_BACK_END_URL}/api/numbers/current`)        .then((res) => res.json())        .then((data) => {          console.log("Fetched data:", data);          setData(data); // Set the fetched data          setLoading(false);        })        .catch((error) => {          console.error("Error fetching data:", error);          setLoading(false);        });  }, []);    useEffect(() => {        console.log("Current Mode:", currentMode);        console.log("Data:" , data)        const selectedDifficulty = data.find(            (difficulty) => difficulty.difficulty === currentMode        );        if (!selectedDifficulty) {            console.error("No data found for current mode:", currentMode); // If no match            return;        }        const expiresDate = new Date(selectedDifficulty.expires);        console.log("Expires Date:", expiresDate);        if (isNaN(expiresDate.getTime())) {            console.error("Invalid expires date:", selectedDifficulty.expires);            return;        }        const target = expiresDate.getTime();        const interval = setInterval(() => {            const now = new Date().getTime();            const distance = target - now;            if (distance <= 0) {                clearInterval(interval);                setTimeRemaining(0); // Stop countdown when time is up            } else {                setTimeRemaining(distance);            }        }, 1000);        return () => clearInterval(interval); // Clean up the interval on component unmount    }, [data, currentMode]);  const formatTime = (time: number) => {    const hours = Math.floor(time / (1000 * 60 * 60));    const minutes = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));    const seconds = Math.floor((time % (1000 * 60)) / 1000);    return {      hours: String(hours).padStart(2, "0"),      minutes: String(minutes).padStart(2, "0"),      seconds: String(seconds).padStart(2, "0"),    };  };  const { hours, minutes, seconds } = formatTime(timeRemaining);  useEffect(() => {      const win = checkWin();      setModeWin(win)    setResult("");    setGuess("");      if(!selectedDifficulty){return}      const attempts = getAttempts()      if(attempts) {}      setCurrentAttempts(selectedDifficulty?.attempts - attempts)  }, [currentMode]);  const handleSubmit = (guess: string) => async (e: React.FormEvent) => {    e.preventDefault();      const selectedDifficulty = data.find(          (difficulty) => difficulty.difficulty === currentMode      );      if (!selectedDifficulty) {          console.error("No data found for current mode:", currentMode); // If no match          return;      }    const value  = selectedDifficulty.value;    if (value === parseInt(guess)) {      setResult("Correct guess");      addAttempt()      addWin()    } else if (value > parseInt(guess)) {      setResult("Try a higher number");      addAttempt()    } else {      setResult("Try a lower number");      addAttempt()    }  };  const addWin = () => {      const attempts = getAttempts()      const storedWins = localStorage.getItem(currentMode)      const parseWins = storedWins ? JSON.parse(storedWins) : {attempts: attempts , completed: true}      parseWins.completed = true      localStorage.setItem(currentMode, JSON.stringify(parseWins))  }  const checkWin = () => {      const attempts = getAttempts()      const storedWins = localStorage.getItem(currentMode)      const parseWins = storedWins ? JSON.parse(storedWins) : {attempts: attempts , completed: true}      return parseWins.completed;  }  const addAttempt = () => {      const storedAttempts = localStorage.getItem((currentMode))      const parseAttempts = storedAttempts ? JSON.parse(storedAttempts) : { attempts: 0, completed: false };      const newAttempts = parseAttempts.attempts += 1      setCurrentAttempts(currentAttempts - newAttempts)      localStorage.setItem(currentMode, JSON.stringify(parseAttempts))  }  const getAttempts = ( ) => {      const attempts = localStorage.getItem(currentMode)      const parseAttempts = attempts ? JSON.parse(attempts) : {attempts: 0,completed: false}      if (parseAttempts.attempts === null){          console.log("Current Attempts" + 0)          return 0;      }      console.log("Current Attempts" + attempts)      return Number(parseAttempts.attempts);  }  const changeDifficulty = (difficulty: string) => {  setCurrentMode(difficulty)      if(!selectedDifficulty){return}      console.log(currentAttempts)  }  if (loading) {    return (        <div className="grid min-h-screen min-w-screen place-content-center">          <p>            <CgSpinner size={50} className="animate-spin" />          </p>        </div>    );  }  return (      <div className="space-y-20">        <div className="flex flex-wrap gap-2">          {Object.values(data).map((difficulty) => (              <Button                  onClick={() => changeDifficulty(difficulty.difficulty)}                  className={`capitalize hover:bg-secondary-foreground ${                      currentMode === difficulty.difficulty &&                      "bg-secondary text-primary "                  }`}                  key={difficulty._id}              >                {difficulty.difficulty}              </Button>          ))}        </div>          <div className={`flex items-center gap-6`}>          <p>Guess a number between 1-{selectedDifficulty?.max}</p><p>{currentAttempts} lives</p></div>        <p className={`flex items-center gap-2 text-primary/50`}><BsArrowRepeat />{hours}:{minutes}:{seconds} til numbers regenerate..</p> {/* Display the countdown */}<p>{modeWin && "win"}</p>        <p>{result}</p>        <form onSubmit={handleSubmit(guess)} className="flex gap-2">          <Input              placeholder="Enter your guess"              id="guess"              value={guess}              onChange={(e) => setGuess(e.target.value)}          />          <Button type="submit">Submit</Button>        </form>      </div>  );}